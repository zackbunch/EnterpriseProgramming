*&---------------------------------------------------------------------*
*& Report ZA020_HW4P1
*&---------------------------------------------------------------------*
*&
*&---------------------------------------------------------------------*
REPORT ZA020_HW4P1.

CLASS AIRPORTCLASS DEFINITION.
  PUBLIC SECTION.

    DATA: ITABLE TYPE STANDARD TABLE OF ZC020SPFLI WITH NON-UNIQUE KEY CONNID,
          WA     LIKE LINE OF ITABLE,
          COUNT  TYPE I.

    METHODS CONSTRUCTOR.
    METHODS RESET_COUNT.
    METHODS CREATE_HEADER.

    METHODS SHOW_ALL_FLIGHTS.

    METHODS SHOW_FROM_COUNTRY_FLIGHTS
      IMPORTING COUNTRY TYPE LAND1. "PASSING IN PARAMETER COUNTRY


    METHODS SHOW_CITY_FLIGHTS
      IMPORTING CITY_FROM TYPE S_FROM_CIT.

    METHODS GET_CONNID_DATA
      IMPORTING CONN_ID          TYPE S_CONN_ID
      RETURNING VALUE(CONNID_WA) LIKE LINE OF ITABLE.

    METHODS NUM_FLIGHTS_TO
      IMPORTING AIRPORT_TO         TYPE S_TOAIRP
      RETURNING VALUE(NUM_FLIGHTS) TYPE I.


    METHODS GET_CONNID
      IMPORTING AIRPORT_FROM       TYPE S_FROMAIRP
                AIRPORT_TO         TYPE S_TOAIRP
      RETURNING VALUE(SEQUENCE_ID) TYPE S_CONN_ID.

    METHODS GET_FLIGHT_TIME
      IMPORTING CONN_ID               TYPE S_CONN_ID
      RETURNING VALUE(FLIGHT_MINUTES) TYPE I.

    METHODS ADD_CONNECTION
      IMPORTING NEW_CONN_WA LIKE LINE OF ITABLE.


    METHODS CHANGE_CITY_TO
      IMPORTING CONN_ID TYPE S_CONN_ID
                CITY    TYPE S_CITY
                COUNTRY TYPE LAND1.



ENDCLASS.





CLASS AIRPORTCLASS IMPLEMENTATION.

  METHOD CONSTRUCTOR.
    SELECT * FROM ZC020SPFLI INTO TABLE ITABLE.
  ENDMETHOD.

  METHOD RESET_COUNT.
    COUNT = 0.
  ENDMETHOD.


  METHOD SHOW_ALL_FLIGHTS.
    WRITE: / 'Testing Method SHOW_ALL_FLIGHTS'.
    SKIP 2.
    CREATE_HEADER( ).

  ENDMETHOD.

  METHOD SHOW_FROM_COUNTRY_FLIGHTS.
    WRITE: / 'Testing Method SHOW_COUNTRY_FLIGHTS for country code:',COUNTRY.
    SKIP 2.
    SELECT * FROM ZC020SPFLI INTO TABLE ITABLE WHERE COUNTRYFR = COUNTRY.
    IF ITABLE IS INITIAL.
      WRITE: 'No flights available from country:',COUNTRY.
    ELSE.
      CREATE_HEADER( ).

    ENDIF.
  ENDMETHOD.

  METHOD SHOW_CITY_FLIGHTS.
    WRITE: 'TESTING METHOD SHOW_FROM_CITY_FLIGHTS WITH CITY NAME:',CITY_FROM.
    SKIP 2.
    WRITE:/ 'Flights leaving from', CITY_FROM.
    NEW-LINE.
    SELECT * FROM ZC020SPFLI INTO TABLE ITABLE WHERE CITYFROM = CITY_FROM.
    IF ITABLE IS INITIAL.
      WRITE:/ 'No flights from', CITY_FROM,'found'.
    ELSE.
      CREATE_HEADER( ).
    ENDIF.

    SKIP 2.
    WRITE:/ 'Flights arriving to', CITY_FROM.
    NEW-LINE.
    SELECT * FROM ZC020SPFLI INTO TABLE ITABLE WHERE CITYTO = CITY_FROM.
    IF ITABLE IS INITIAL.
      WRITE:/ 'No flights to', CITY_FROM,'found'.
    ELSE.
      CREATE_HEADER( ).
    ENDIF.

  ENDMETHOD.


  METHOD GET_CONNID_DATA.
    WRITE: 'Testing METHOD GET_CONNID_DATA with CONNID:',CONN_ID.
    SKIP 2.
    SELECT SINGLE * INTO CONNID_WA FROM ZC020SPFLI WHERE CONNID = CONN_ID.

  ENDMETHOD.

  METHOD NUM_FLIGHTS_TO.
    WRITE: 'Testing METHOD NUM_FLIGHTS_TO with airport code:',AIRPORT_TO.
    SKIP 2.
    LOOP AT ITABLE INTO WA WHERE AIRPTO = AIRPORT_TO.
      COUNT = COUNT + 1.
      NUM_FLIGHTS = COUNT.
    ENDLOOP.
    RESET_COUNT( ).

  ENDMETHOD.

  METHOD GET_CONNID.
    WRITE: 'Testing method GET_CONNID with departure airport of',AIRPORT_FROM,'and arrival airport',AIRPORT_TO.
    SELECT COUNT( * ) FROM ZC020SPFLI
      WHERE AIRPFROM = AIRPORT_FROM AND
      AIRPTO = AIRPORT_TO.

    IF SY-SUBRC EQ 0.
      LOOP AT ITABLE INTO WA WHERE AIRPFROM = AIRPORT_FROM AND  AIRPTO = AIRPORT_TO.

        SEQUENCE_ID = WA-CONNID.
        WRITE: / | The connection ID for the flight from { AIRPORT_FROM } to { AIRPORT_TO } is { SEQUENCE_ID }|.

      ENDLOOP.
    ENDIF.
    RESET_COUNT( ).
  ENDMETHOD.


  METHOD GET_FLIGHT_TIME.
    WRITE: / |'Testing method GET_FLIGHT_TIME with connection ID: { CONN_ID }|.
    LOOP AT ITABLE INTO WA WHERE CONNID = CONN_ID.
      FLIGHT_MINUTES = WA-FLTIME.
    ENDLOOP.
    SKIP 1.
  ENDMETHOD.

  METHOD ADD_CONNECTION.
    INSERT INTO ZC020SPFLI VALUES NEW_CONN_WA.
    IF SY-DBCNT = 1.
      INSERT NEW_CONN_WA INTO TABLE ITABLE.
    ELSE.
      WRITE 'Failed to insert structure into database.'.
    ENDIF.
  ENDMETHOD.

  METHOD CHANGE_CITY_TO.
    READ TABLE ITABLE WITH TABLE KEY CONNID = CONN_ID INTO WA.
    WA-CITYTO = CITY.
    WA-COUNTRYTO = COUNTRY.
    INSERT WA INTO TABLE ITABLE.
    INSERT INTO ZC020SPFLI VALUES WA.
    DELETE TABLE ITABLE WITH TABLE KEY CONNID = CONN_ID.
  ENDMETHOD.
















  METHOD CREATE_HEADER.


    WRITE: 'Airline Code',20'Flight Conn Number',40'Country From',60
    'Departure City',80'Departure Airport',100
    'Country To',120'Arrival City',140'Destination Airport',
    160'Flight Time',180'Departure Time', 200'Arrival Time',
    220'Distance',240'Distance Units',
    260  'Flight Type',280'Arrival n day(s) later'.

    ULINE.
    LOOP AT ITABLE INTO WA.
      WRITE: / WA-CARRID UNDER 'Airline Code',WA-CONNID UNDER 'Flight Conn Number', WA-COUNTRYFR UNDER 'Country From',
      WA-CITYFROM UNDER 'Departure City', WA-AIRPFROM UNDER 'Departure Airport', WA-COUNTRYTO UNDER 'Country To',
      WA-CITYTO UNDER 'Arrival City', WA-AIRPTO UNDER 'Destination Airport', WA-FLTIME UNDER 'Flight Time', WA-DEPTIME UNDER 'Departure Time',
      WA-ARRTIME UNDER 'Arrival Time', WA-DISTANCE UNDER  'Distance', WA-DISTID UNDER 'Distance Units',WA-FLTYPE UNDER 'Flight Type',
      WA-PERIOD UNDER 'Arrival n day(s) later'.

*INCREMENT THE COUNTER TO COUNT THE NUMBER OF RECORDS BEING DISPLAYED
      COUNT = COUNT + 1.
    ENDLOOP.
    SKIP 1.
    WRITE: COUNT, 'flights displayed' RIGHT-JUSTIFIED.
    SKIP 3.
    RESET_COUNT( ).
  ENDMETHOD.
























ENDCLASS.

START-OF-SELECTION.

  DATA: NEWAIRPORTOBJECT TYPE REF TO AIRPORTCLASS,
        ITABLE           TYPE STANDARD TABLE OF ZC020SPFLI,
        WA               LIKE LINE OF ITABLE,
        NUM_FLIGHTS      TYPE I,
        FLIGHTS_MINUTES  TYPE I,
        CONNECTION_ID    TYPE STRING,
        FLIGHT_MINUTES   TYPE I.


  WA-CARRID = 'ZB'.
  WA-CONNID = 7777.
  WA-COUNTRYFR = 'US'.
  WA-CITYFROM = 'NEW YORK'.
  WA-AIRPFROM = 'JFK'.
  WA-COUNTRYTO = 'US'.
  WA-CITYTO = 'SAN FRANCISCO'.
  WA-AIRPTO = 'SFO'.
  WA-FLTIME = 7777.
  WA-DEPTIME = '110000'.
  WA-ARRTIME = '120000'.
  WA-DISTANCE = 3290.
  WA-DISTID = 'MI'.
  WA-FLTYPE = 'X'.
  WA-PERIOD = 0.


  CREATE OBJECT NEWAIRPORTOBJECT.

*NEWAIRPORTOBJECT->SHOW_ALL_FLIGHTS( ). "TESTING SHOW_ALL_FLIGHTS METHOD
* NEWAIRPORTOBJECT->SHOW_FROM_COUNTRY_FLIGHTS( 'US' ).
*  NEWAIRPORTOBJECT->SHOW_CITY_FLIGHTS( 'NEW YORK' ).


*  WA = NEWAIRPORTOBJECT->GET_CONNID_DATA( 0064 ).
*  IF WA IS NOT INITIAL.
*    WRITE:/ 'Connection ID Workarea:',WA-CONNID.
*  ELSE.
*    WRITE: / 'EMPTY'.
*  ENDIF.

*  NUM_FLIGHTS = NEWAIRPORTOBJECT->NUM_FLIGHTS_TO('JFK').
*  WRITE: / |The number of flights to JFK is { NUM_FLIGHTS }|.

*CONNECTION_ID = NEWAIRPORTOBJECT->GET_CONNID( AIRPORT_FROM = 'JFK' AIRPORT_TO = 'SFO').
* WRITE: / | The connection ID for the flight from JFK to SFO is { CONNECTION_ID }|.

*
*FLIGHT_MINUTES = NEWAIRPORTOBJECT->GET_FLIGHT_TIME('0017').
*WRITE: / |The flight time is { FLIGHT_MINUTES } minutes|.

*
*  WRITE: / |TESTING ADD_CONNECTION|.
*  SKIP 1.
*  NEWAIRPORTOBJECT->ADD_CONNECTION( WA ).
*  WRITE: / |The structure { WA-CONNID } has been added|.


*
*  WRITE: / |Testing CHANGE_CITY_TO|.
*  SKIP 1.
*  WRITE: / |Changing destination  city of { WA-CITYTO } to 'FRANKFURT'|.
*NEWAIRPORTOBJECT->CHANGE_CITY_TO( CONN_ID = 7777 CITY = 'FRANKFURT' COUNTRY = 'DE' ).
*NEWAIRPORTOBJECT->SHOW_ALL_FLIGHTS( ). "TESTING SHOW_ALL_FLIGHTS METHOD
